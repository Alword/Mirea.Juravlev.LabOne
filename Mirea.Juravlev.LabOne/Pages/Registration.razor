@page "/registration/{identity?}"
@inject NavigationManager navigation;
@inject UserStorage users;

<PageTitle>Регистрация</PageTitle>

<h1>Регистрация</h1>

<div class="mb-3">
    <label class="form-label">ID или имя пользователя</label>
    <input class="form-control" @bind="User.Id" placeholder="IMurometz">
    <div class="invalid-feedback" style="display:block">
        @(IdError)
    </div>
</div>

<div class="mb-3">
    <label class="form-label">Пароль</label>
    <input class="form-control" @bind="User.Password" placeholder="Str0ngP@ssw0rd">
    <div class="invalid-feedback" style="display:block">
        @(PasswordError)
    </div>
</div>

<div class="mb-3">
    <label class="form-label">ФИО</label>
    <input class="form-control" @bind="User.Represenative" placeholder="Илья Иванович Муромец">
</div>

<div class="mb-3">
    <label class="form-label">Дата рождения</label>
    <input type="date" @bind="User.Birthdate" class="form-control">
</div>

<div class="mb-3">
    <label class="form-label">Место рождения (город)</label>
    <input class="form-control" @bind="User.Place" placeholder="Карачарово">
</div>

<div class="mb-3">
    <label class="form-label">Номер телефона</label>
    <input class="form-control" @bind="User.PhoneNumber" placeholder="88005553535">
</div>

<div class="col-auto">
    <button class="btn btn-primary mb-3" @onclick=Register>@(string.IsNullOrWhiteSpace(Identity) ? "Зарегистрироваться" : "Сохранить")</button>
</div>
@code {
    [Parameter]
    public string? Identity { get; set; }

    UserModel User { get; set; } = new UserModel();

    string PasswordError { get; set; } = string.Empty;
    string IdError { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(Identity))
        {
            User = await users.GetUser(Identity);
        }
    }

    private async Task Register()
    {
        IdError = string.Empty;
        PasswordError = string.Empty;

        if (string.IsNullOrWhiteSpace(User.Id))
        {
            IdError = "Идентификатор не должен быть пустым";
            return;
        }

        if (User.Password.Length < UserModel.RequiredPasswordLength)
        {
            PasswordError = $"Длина пароля должна быть больше или равена {UserModel.RequiredPasswordLength}";
            return;
        }
        if (!UserModel.Simbols.IsMatch(User.Password))
        {
            PasswordError = $"Пароль должен содержать {UserModel.SimbolsInfo}";
            return;
        }
        var oldUser = await users.GetUser(User.Id);

        if (!string.IsNullOrWhiteSpace(Identity))
        {

            if (oldUser.Id != Identity)
            {
                IdError = "Нельзя сменить идентификатор пользователя";
                return;
            }

            var maxSimbolsCount = User.Password.GroupBy(e => e).ToDictionary(e => e, e => e.Count()).Max(e => e.Value);
            if (oldUser.Password != User.Password && maxSimbolsCount > 1)
            {
                PasswordError = $"Символы в пароле не должны повторятся";
                return;
            }
        }
        else if (!string.IsNullOrWhiteSpace(oldUser.Id))
        {
            IdError = "Идентификатор занят";
            return;
        }
        await users.SaveUser(User);
        navigation.NavigateTo($"registration/{User.Id}");
    }
}
